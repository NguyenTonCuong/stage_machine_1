/*
 * LCD5110.h
 *
 *  Created on: Apr 18, 2017
 *      Author: viet
 */

#ifndef LCD5110_H_
#define LCD5110_H_


//*****************************************************************************
// DEFINE
//*****************************************************************************
#define RST     GPIO_PIN_1        //PE1
#define CE      GPIO_PIN_2        //PE2
#define DC      GPIO_PIN_3        //PE3
#define DIN     GPIO_PIN_4        //PE4
#define CLK     GPIO_PIN_5        //PE5

#define LCD5110_OUT    GPIO_PORTE_BASE      //Output of LCD is marked to values of PortE
#define LCD5110_SYS    SYSCTL_PERIPH_GPIOE      //Direction of LCD is direction of PE

#define LCD5110_CMD    0       //When DC=0 bits comes to command
#define LCD5110_DATA   1      //When DC=1 bits comes to data

void LCD5110_ShiftOut(unsigned char txdata);
void LCD5110_Write(char dc,unsigned char data);
void LCD5110_GotoXY(int x,int y);   //x:0->5  y:0->83
void LCD5110_Clr();
void LCD5110_Char(char character);
void LCD5110_String(char *characters);
void LCD5110_Init(unsigned char contrast,unsigned char coefficent,unsigned char bias);

/******************************************************************************\
*                   Function (noi dung ham)                            *
\******************************************************************************/
static const char ASCII[][5] = {        // basic font
     {0x00, 0x00, 0x00, 0x00, 0x00} // 20
    ,{0x00, 0x00, 0x5f, 0x00, 0x00} // 21 !
    ,{0x00, 0x07, 0x00, 0x07, 0x00} // 22 "
    ,{0x14, 0x7f, 0x14, 0x7f, 0x14} // 23 #
    ,{0x24, 0x2a, 0x7f, 0x2a, 0x12} // 24 $
    ,{0x23, 0x13, 0x08, 0x64, 0x62} // 25 %
    ,{0x36, 0x49, 0x55, 0x22, 0x50} // 26 &
    ,{0x00, 0x05, 0x03, 0x00, 0x00} // 27 '
    ,{0x00, 0x1c, 0x22, 0x41, 0x00} // 28 (
    ,{0x00, 0x41, 0x22, 0x1c, 0x00} // 29 )
    ,{0x14, 0x08, 0x3e, 0x08, 0x14} // 2a *
    ,{0x08, 0x08, 0x3e, 0x08, 0x08} // 2b +
    ,{0x00, 0x50, 0x30, 0x00, 0x00} // 2c ,
    ,{0x08, 0x08, 0x08, 0x08, 0x08} // 2d -
    ,{0x00, 0x60, 0x60, 0x00, 0x00} // 2e .
    ,{0x20, 0x10, 0x08, 0x04, 0x02} // 2f /
    ,{0x3e, 0x51, 0x49, 0x45, 0x3e} // 30 0
    ,{0x00, 0x42, 0x7f, 0x40, 0x00} // 31 1
    ,{0x42, 0x61, 0x51, 0x49, 0x46} // 32 2
    ,{0x21, 0x41, 0x45, 0x4b, 0x31} // 33 3
    ,{0x18, 0x14, 0x12, 0x7f, 0x10} // 34 4
    ,{0x27, 0x45, 0x45, 0x45, 0x39} // 35 5
    ,{0x3c, 0x4a, 0x49, 0x49, 0x30} // 36 6
    ,{0x01, 0x71, 0x09, 0x05, 0x03} // 37 7
    ,{0x36, 0x49, 0x49, 0x49, 0x36} // 38 8
    ,{0x06, 0x49, 0x49, 0x29, 0x1e} // 39 9
    ,{0x00, 0x36, 0x36, 0x00, 0x00} // 3a :
    ,{0x00, 0x56, 0x36, 0x00, 0x00} // 3b ;
    ,{0x08, 0x14, 0x22, 0x41, 0x00} // 3c <
    ,{0x14, 0x14, 0x14, 0x14, 0x14} // 3d =
    ,{0x00, 0x41, 0x22, 0x14, 0x08} // 3e >
    ,{0x02, 0x01, 0x51, 0x09, 0x06} // 3f ?
    ,{0x32, 0x49, 0x79, 0x41, 0x3e} // 40 @
    ,{0x7e, 0x11, 0x11, 0x11, 0x7e} // 41 A
    ,{0x7f, 0x49, 0x49, 0x49, 0x36} // 42 B
    ,{0x3e, 0x41, 0x41, 0x41, 0x22} // 43 C
    ,{0x7f, 0x41, 0x41, 0x22, 0x1c} // 44 D
    ,{0x7f, 0x49, 0x49, 0x49, 0x41} // 45 E
    ,{0x7f, 0x09, 0x09, 0x09, 0x01} // 46 F
    ,{0x3e, 0x41, 0x49, 0x49, 0x7a} // 47 G
    ,{0x7f, 0x08, 0x08, 0x08, 0x7f} // 48 H
    ,{0x00, 0x41, 0x7f, 0x41, 0x00} // 49 I
    ,{0x20, 0x40, 0x41, 0x3f, 0x01} // 4a J
    ,{0x7f, 0x08, 0x14, 0x22, 0x41} // 4b K
    ,{0x7f, 0x40, 0x40, 0x40, 0x40} // 4c L
    ,{0x7f, 0x02, 0x0c, 0x02, 0x7f} // 4d M
    ,{0x7f, 0x04, 0x08, 0x10, 0x7f} // 4e N
    ,{0x3e, 0x41, 0x41, 0x41, 0x3e} // 4f O
    ,{0x7f, 0x09, 0x09, 0x09, 0x06} // 50 P
    ,{0x3e, 0x41, 0x51, 0x21, 0x5e} // 51 Q
    ,{0x7f, 0x09, 0x19, 0x29, 0x46} // 52 R
    ,{0x46, 0x49, 0x49, 0x49, 0x31} // 53 S
    ,{0x01, 0x01, 0x7f, 0x01, 0x01} // 54 T
    ,{0x3f, 0x40, 0x40, 0x40, 0x3f} // 55 U
    ,{0x1f, 0x20, 0x40, 0x20, 0x1f} // 56 V
    ,{0x3f, 0x40, 0x38, 0x40, 0x3f} // 57 W
    ,{0x63, 0x14, 0x08, 0x14, 0x63} // 58 X
    ,{0x07, 0x08, 0x70, 0x08, 0x07} // 59 Y
    ,{0x61, 0x51, 0x49, 0x45, 0x43} // 5a Z
    ,{0x00, 0x7f, 0x41, 0x41, 0x00} // 5b [
    ,{0x02, 0x04, 0x08, 0x10, 0x20} // 5c ¥
    ,{0x00, 0x41, 0x41, 0x7f, 0x00} // 5d ]
    ,{0x04, 0x02, 0x01, 0x02, 0x04} // 5e ^
    ,{0x40, 0x40, 0x40, 0x40, 0x40} // 5f _
    ,{0x00, 0x01, 0x02, 0x04, 0x00} // 60 `
    ,{0x20, 0x54, 0x54, 0x54, 0x78} // 61 a
    ,{0x7f, 0x48, 0x44, 0x44, 0x38} // 62 b
    ,{0x38, 0x44, 0x44, 0x44, 0x20} // 63 c
    ,{0x38, 0x44, 0x44, 0x48, 0x7f} // 64 d
    ,{0x38, 0x54, 0x54, 0x54, 0x18} // 65 e
    ,{0x08, 0x7e, 0x09, 0x01, 0x02} // 66 f
    ,{0x0c, 0x52, 0x52, 0x52, 0x3e} // 67 g
    ,{0x7f, 0x08, 0x04, 0x04, 0x78} // 68 h
    ,{0x00, 0x44, 0x7d, 0x40, 0x00} // 69 i
    ,{0x20, 0x40, 0x44, 0x3d, 0x00} // 6a j
    ,{0x7f, 0x10, 0x28, 0x44, 0x00} // 6b k
    ,{0x00, 0x41, 0x7f, 0x40, 0x00} // 6c l
    ,{0x7c, 0x04, 0x18, 0x04, 0x78} // 6d m
    ,{0x7c, 0x08, 0x04, 0x04, 0x78} // 6e n
    ,{0x38, 0x44, 0x44, 0x44, 0x38} // 6f o
    ,{0x7c, 0x14, 0x14, 0x14, 0x08} // 70 p
    ,{0x08, 0x14, 0x14, 0x18, 0x7c} // 71 q
    ,{0x7c, 0x08, 0x04, 0x04, 0x08} // 72 r
    ,{0x48, 0x54, 0x54, 0x54, 0x20} // 73 s
    ,{0x04, 0x3f, 0x44, 0x40, 0x20} // 74 t
    ,{0x3c, 0x40, 0x40, 0x20, 0x7c} // 75 u
    ,{0x1c, 0x20, 0x40, 0x20, 0x1c} // 76 v
    ,{0x3c, 0x40, 0x30, 0x40, 0x3c} // 77 w
    ,{0x44, 0x28, 0x10, 0x28, 0x44} // 78 x
    ,{0x0c, 0x50, 0x50, 0x50, 0x3c} // 79 y
    ,{0x44, 0x64, 0x54, 0x4c, 0x44} // 7a z
    ,{0x00, 0x08, 0x36, 0x41, 0x00} // 7b {
    ,{0x00, 0x00, 0x7f, 0x00, 0x00} // 7c |
    ,{0x00, 0x41, 0x36, 0x08, 0x00} // 7d }
    ,{0x10, 0x08, 0x08, 0x10, 0x08} // 7e ~
    ,{0x00, 0x06, 0x09, 0x09, 0x06} // 7f Deg Symbol

};
const unsigned char hinh_xam_LCD [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
0x80, 0x18, 0x30, 0x60, 0xA0, 0x40, 0x80, 0x80, 0x00, 0x20, 0x40, 0x80, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0x20, 0x00,
0x80, 0x80, 0x40, 0xA0, 0x60, 0x30, 0x18, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x22, 0x22, 0x44, 0x44, 0x4D, 0x4D, 0x5B, 0x5A, 0x5A, 0x4D, 0x4D, 0x6E, 0x7F, 0x7D, 0x7E, 0xFE,
0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xEE, 0xFC, 0x3C, 0x38, 0x00, 0x0C, 0xF6, 0x06, 0x96, 0xFE, 0x7E,
0xFE, 0xDE, 0xBE, 0xD6, 0x00, 0x00, 0x00, 0x38, 0x3C, 0xFC, 0xEE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF,
0xFE, 0x7E, 0x7D, 0x7F, 0x6E, 0x4D, 0x4D, 0x5A, 0x5A, 0x5B, 0x4D, 0x4D, 0x44, 0x44, 0x22, 0x22,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x02, 0x46, 0x46, 0x46, 0x66, 0x26, 0x26, 0xA6, 0xA6, 0x36, 0x56, 0xD4, 0xBD, 0x69,
0xDB, 0xBF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x7B, 0xBF, 0xFB, 0xBE, 0xFC, 0x7C, 0xFD, 0xCD, 0x7E,
0xF6, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xF6, 0x7E, 0xCC, 0xFC, 0x7C, 0xFC, 0xBE, 0x5B, 0xBF,
0x7B, 0xFF, 0xFF, 0xFF, 0xBF, 0x7F, 0xBF, 0xDB, 0x69, 0xBD, 0xD4, 0x56, 0x36, 0xA6, 0xA6, 0x26,
0x26, 0x66, 0x46, 0x46, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x06, 0x92, 0x92, 0x93, 0xCB, 0xCA, 0x6C, 0x65,
0x35, 0xB2, 0x9A, 0x55, 0xAD, 0x5E, 0x2D, 0x16, 0x4F, 0x43, 0xD1, 0xF0, 0xDB, 0xFD, 0xFC, 0x76,
0x3E, 0x1F, 0x4F, 0xEF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xBD, 0x4F, 0x1F, 0x3E,
0x76, 0xFC, 0xFD, 0xDB, 0xF0, 0xD1, 0x43, 0x4F, 0x17, 0x2D, 0x5E, 0xAD, 0x55, 0x9B, 0xB2, 0x35,
0x65, 0x6C, 0xCA, 0xCB, 0x93, 0x92, 0x92, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x04, 0x04, 0x06, 0x06, 0x43, 0x2A, 0x25, 0x8D, 0xB4, 0x30, 0xF0, 0x30, 0x30, 0x3C, 0x2F, 0x63,
0xD0, 0xD1, 0x81, 0x80, 0x4E, 0xE5, 0x7B, 0x1E, 0x93, 0x4C, 0xB9, 0xFF, 0xFF, 0xB9, 0x4C, 0x93,
0x1E, 0x7B, 0xA5, 0x4E, 0x80, 0x81, 0xD1, 0xD0, 0x43, 0x2F, 0x3C, 0x30, 0x30, 0xF0, 0x30, 0xB4,
0x8D, 0x25, 0x2A, 0x43, 0x06, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x02, 0x01, 0x00, 0x00, 0x0F, 0x07, 0x00, 0x0F, 0x1F,
0x1F, 0x0F, 0x00, 0x07, 0x0F, 0x00, 0x00, 0x01, 0x02, 0x06, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char vk_iu [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x07, 0x0F,
0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x03, 0x03, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07,
0x07, 0x07, 0x07, 0x17, 0x1F, 0x1F, 0x0F, 0x1F, 0x3F, 0x3F, 0x1F, 0x3F, 0x1B, 0x1F, 0x3F, 0x3F,
0x3F, 0x07, 0x0F, 0x07, 0x1E, 0x1E, 0x3F, 0x7F, 0xFF, 0xF8, 0x70, 0xE0, 0xFC, 0xFE, 0xF8, 0xFC,
0x8C, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x40, 0x80, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x80, 0x80, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF0, 0xFA, 0xFC, 0xFF, 0xFF,
0xFF, 0x7F, 0x2F, 0x13, 0x00, 0x00, 0x00, 0x00, 0xE3, 0xE0, 0xF0, 0xF9, 0xF9, 0xF9, 0xFD, 0xFD,
0xFD, 0xFC, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xF9, 0xE0, 0xF8, 0x78, 0xB8, 0xC9, 0xE0, 0xF8, 0xF0,
0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xF8, 0xF0, 0xF0, 0xE0, 0xE0, 0xE0, 0xC0, 0x80, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xE0, 0xE0, 0xF0,
0xF0, 0xF0, 0xF8, 0xF8, 0xF8, 0xFC, 0xFC, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xEF, 0xE7, 0xE0, 0xC0, 0xC0, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFE, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xF9, 0xE1, 0xC1, 0xC1, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x00, 0x80, 0x82, 0xC3, 0xE3, 0xF3,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xBF, 0xDF, 0xEF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xF9, 0xFD, 0xFD, 0xBF, 0xDF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x3F, 0xBF, 0x3F, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFE,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0x07, 0xFB, 0xFF, 0xFD, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x1F, 0x3F, 0x1F, 0x1F,
0x3F, 0x3F, 0x7F, 0x8F, 0x07, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x3F, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};
const unsigned char ki_niem [] = {
0xE7, 0xE3, 0xED, 0xD9, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x88, 0xC0, 0x00, 0x00, 0x00,
0x00, 0x7C, 0x1F, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x38, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0xF0, 0xF0, 0xF0,
0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xE0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x07, 0x87, 0x85, 0xC2, 0xC4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0xF0, 0xF0, 0xF0,
0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xF0, 0xF9, 0xF9, 0xFB, 0xFB, 0xFB, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xF8, 0xE0, 0xF0, 0xE0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x83, 0x83, 0x83, 0x83, 0xC1, 0xC1,
0xE3, 0xFF, 0xFF, 0xFF, 0xEF, 0xDF, 0xFF, 0xF7, 0xFF, 0xF7, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x01, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0x7F, 0x7F, 0x7F, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFC,
0xFC, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0xE0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x0F, 0x1E, 0x3F, 0x7F,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0x00, 0x10, 0x18, 0x0C, 0x0C, 0x0E, 0x1F, 0x1F, 0x1F, 0x1F,
0x3F, 0x7F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFB, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0x7C, 0x7F, 0x7F, 0x7F, 0x79, 0x79, 0x0D, 0x01, 0x00, 0x00,
0x80, 0xF0, 0xF8, 0xF0, 0xE0, 0xE1, 0xC3, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0x00,
0x00, 0x00, 0x00, 0x00, 0x20, 0x21, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0x7F,
0x7F, 0x3F, 0x3F, 0x1F, 0x1F, 0x0F, 0x07, 0x07, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03,
0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x02, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07,
0x0F, 0x0F, 0x0E, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x0F, 0x0F, 0x07, 0x07, 0x03,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

//*****************************************************************************
// Bien toan cuc
//*****************************************************************************
void LCD5110_ShiftOut(unsigned char txdata)
{
    unsigned int i;
    //( LCD5110_OUT, RST|CE|DC|DIN|CLK, ~CLK);                   // PE5 = 0
    GPIOPinWrite( LCD5110_OUT, CLK, 0);                   // PE5 = 0
    //GPIOPinWrite( LCD5110_OUT, RST|CE|DC|DIN|CLK, DIN);                    // PE4 = 1
    GPIOPinWrite( LCD5110_OUT, DIN, DIN);                   // PE5 = 0
    for(i=8;i>0;i--)
    {
        if((txdata & GPIO_PIN_7) == GPIO_PIN_7)
        	//GPIOPinWrite( LCD5110_OUT, RST|CE|DC|DIN|CLK, DIN);
        	GPIOPinWrite( LCD5110_OUT,DIN, DIN);
        else
        	//GPIOPinWrite( LCD5110_OUT, RST|CE|DC|DIN|CLK, ~DIN);
        	GPIOPinWrite(LCD5110_OUT, DIN, 0);
        //GPIOPinWrite( LCD5110_OUT, RST|CE|DC|DIN|CLK,  CLK);
        GPIOPinWrite( LCD5110_OUT, CLK,  CLK);
       // GPIOPinWrite( LCD5110_OUT, RST|CE|DC|DIN|CLK, ~CLK);
        GPIOPinWrite( LCD5110_OUT, CLK, 0);
        txdata<<=1;
    }
}

void LCD5110_Write(char dc,unsigned char data)
{
    if(dc)
    	//GPIOPinWrite( LCD5110_OUT, RST|CE|DC|DIN|CLK, DC);
          GPIOPinWrite( LCD5110_OUT,DC, DC);
    else
    	// LCD5110_OUT, RST|CE|DC|DIN|CLK, ~DC);
    	GPIOPinWrite(LCD5110_OUT, DC, 0);
    //GPIOPinWrite( LCD5110_OUT, RST|CE|DC|DIN|CLK, ~CE);
    GPIOPinWrite( LCD5110_OUT, CE, 0);
    LCD5110_ShiftOut(data);
    //GIOPinWrite( LCD5110_OUT, RST|CE|DC|DIN|CLK,  CE);
    GPIOPinWrite( LCD5110_OUT, CE, CE);
}

void LCD5110_GotoXY(int x,int y)
{
    LCD5110_Write(LCD5110_CMD,0x80 | x);
    LCD5110_Write(LCD5110_CMD,0x40 | y);
}
void LCD5110_Clr()
{
    unsigned int i;
    for(i=0;i<504;i++)
    {
        LCD5110_Write(LCD5110_DATA,0x00);
    }
    LCD5110_GotoXY(0,0);
}

void LCD5110_Char(char character)
{
    unsigned int i;
    LCD5110_Write(LCD5110_DATA,0x00);
    for(i=0;i<5;i++)
        LCD5110_Write(LCD5110_DATA,ASCII[character - 0x20][i]);
    LCD5110_Write(LCD5110_DATA,0x00);
}

void LCD5110_String(char *characters)
{
    while(*characters)
        LCD5110_Char(*characters++);
}

void LCD5110_Init(unsigned char contrast,unsigned char coefficient,unsigned char bias)
{
	SysCtlPeripheralEnable(LCD5110_SYS);
	GPIOPinTypeGPIOOutput(LCD5110_OUT, RST|CE|DC|DIN|CLK);
	//GPIOPinWrite( LCD5110_OUT, RST|CE|DC|DIN|CLK, ~RST);
	GPIOPinWrite( LCD5110_OUT, RST ,0);
	//GPIOPinWrite( LCD5110_OUT, RST|CE|DC|DIN|CLK,  RST);
	GPIOPinWrite( LCD5110_OUT, RST, RST);

    LCD5110_Write(LCD5110_CMD,0x21);
    LCD5110_Write(LCD5110_CMD,0x80 + contrast);
    LCD5110_Write(LCD5110_CMD,0x04 + coefficient);
    LCD5110_Write(LCD5110_CMD,0x10 + bias);
    LCD5110_Write(LCD5110_CMD,0x20);
    LCD5110_Write(LCD5110_CMD,0x0C);
}





#endif /* LCD5110_H_ */
